[{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://matildabrown.github.io/rWCVP/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://matildabrown.github.io/rWCVP/articles/coordinate-cleaning.html","id":"cleaning-occurrence-records-for-a-single-species","dir":"Articles","previous_headings":"","what":"Cleaning occurrence records for a single species","title":"","text":"tutorial, ’ll use Callitris rhomboidea (lovely Australian conifer) example.","code":""},{"path":"https://matildabrown.github.io/rWCVP/articles/coordinate-cleaning.html","id":"downloading-occurrence-records","dir":"Articles","previous_headings":"Cleaning occurrence records for a single species","what":"Downloading occurrence records","title":"","text":"first step get occurrences records somewhere. ’ll use rgbif get GBIF. ’ve limited number occurrences 1000 , doesn’t take long download. ’ve requested get records coordinates don’t issues automatically flagged GBIF.","code":"gbif_response <- occ_data(scientificName=\"Callitris rhomboidea\", limit=1000,                           hasCoordinate=TRUE, hasGeospatialIssue=FALSE)  paste(1000, \"of\", gbif_response$meta$count, \"records downloaded.\") #> [1] \"1000 of 3497 records downloaded.\""},{"path":"https://matildabrown.github.io/rWCVP/articles/coordinate-cleaning.html","id":"preparing-the-occurrences","dir":"Articles","previous_headings":"Cleaning occurrence records for a single species","what":"Preparing the occurrences","title":"","text":"remote non-native occurrences download, need get data right format. Removing non-native occurrences can quite computationally expensive, large number occurrences species native large number regions. probably want cleaning steps, like removing records sea known institution locations, filtering native range. now, don’t many points, won’t anymore cleaning. make sure convert data frame records spatial data frame able filter points using shapes species’ native range. Note - ’re using data frame occurrences, rather one downloaded GBIF, ’ll still need convert spatial data frame like ’ve done set appropriate coordinate system. ’ve used EPSG 4326 ’s default one coordinates degrees longitude latitude.","code":"occs <-    gbif_response$data %>%    select(scientificName, decimalLatitude, decimalLongitude) %>%   st_as_sf(coords=c(\"decimalLongitude\", \"decimalLatitude\"), crs = st_crs(4326))"},{"path":"https://matildabrown.github.io/rWCVP/articles/coordinate-cleaning.html","id":"getting-the-native-range","dir":"Articles","previous_headings":"Cleaning occurrence records for a single species","what":"Getting the native range","title":"","text":"Now can use rWCVP download native distribution species. take look .  occurrence records map onto range?  Yikes, rogue points!","code":"native_range <- wcvp_distribution(\"Callitris rhomboidea\", taxon_rank=\"species\",                                 introduced=FALSE, extinct=FALSE,                                  location_doubtful=FALSE) (p <- wcvp_distribution_map(native_range, crop_map=TRUE) +     theme(legend.position=\"none\")) p + geom_sf(data=occs, fill=\"#6e6ad9\",col=\"black\", shape=21)"},{"path":"https://matildabrown.github.io/rWCVP/articles/coordinate-cleaning.html","id":"removing-non-native-occurrences","dir":"Articles","previous_headings":"Cleaning occurrence records for a single species","what":"Removing non-native occurrences","title":"","text":"Now let’s get rid rogue points. One way check points fall within native range polygons, getting TRUE/FALSE value . can use st_intersects function sf . four native range polygons, get four values point rather just one, also merge native range polygons together using st_union. Highlighting map gives idea points erroneous.  obviously bad (far native range), quite close. Let’s closer look ones near native range polygons:  Ah, water! quite obviously coast quite close. might problem resolution WGSRPD shape files ’re using - higher resolution might reveal points actually within native range. can try adding buffer cleaning enthusiastically. coordinates shape file degrees, 1 km buffer approximately 0.009 degrees latitude (longitude equator). high latitudes, buffer 0.009 degrees going significantly 1 km, might want change buffer depending location span data. Let’s see occurrences fall within ~1 km native range. clarity, ’ve removed points within native range just plotting points within buffer (yellow) outside buffer (red). appropriate buffer width might wider narrower, depending downstream analyses, visualisation can help sense-check buffer discarding points. Now, can discard occurrences >1 km (approximately) outside native range.","code":"occs$native <- st_intersects(occs, st_union(native_range), sparse=FALSE)[,1] p +   geom_sf(data=occs,           fill=c(\"red\",\"#72994c\")[factor(occs$native)],           col=\"black\",            shape=21) lims <- st_bbox(native_range) #getting a sensible bounding box  p +   geom_sf(data=occs,            fill=c(\"red\",\"#72994c\")[factor(occs$native)],           col=\"black\",            shape=21)+   coord_sf(xlim=lims[c(1,3)], ylim=lims[c(2,4)]) buffered_dist <- native_range %>%   st_union() %>%   st_buffer(0.009)  occs$native_buffer <- st_intersects(occs, buffered_dist, sparse=FALSE)[,1]  # filter out the points that are in the native range suspect_occs <- occs %>%    filter(! native)  p +    geom_sf(data=buffered_dist, fill=\"transparent\", col=\"gold\")+   geom_sf(data=suspect_occs,            fill=c(\"red\",\"gold\")[factor(suspect_occs$native_buffer)],           col=\"black\",            shape=21)+     coord_sf(xlim=lims[c(1,3)], ylim=lims[c(2,4)]) occs_filtered <- occs %>%    filter(native_buffer)  #filtered occurrences plotted p +   geom_sf(data=occs_filtered, fill=\"#6e6ad9\",col=\"black\", shape=21)"},{"path":"https://matildabrown.github.io/rWCVP/articles/custom-checklist.html","id":"a-checklist-of-endemic-species","dir":"Articles","previous_headings":"","what":"A checklist of endemic species","title":"","text":"start generating checklist species occur Sierra Leone. Remembering /finding appropriate WGSRPD Level 3 codes pain, can use get_wgsrpd3_codes(\"Sierra Leone\") work us function call. many species occur Sierra Leone, many endemic? can use endemic column , ’s really simple. Easy! list endemic species, can simply filter checklist using endemic column, near-endemics?","code":"sl_code <- get_wgsrpd3_codes(\"Sierra Leone\") #> i Matches to input geography found at Area (Level 3) and Country (Gallagher) sl_species <- wcvp_checklist(area=sl_code, synonyms = FALSE) #> i No taxon specified. Generating checklist for all species. #> i Generating a checklist of accepted species names only. Use `synonyms = TRUE` to include all names #enclosed in parentheses so that the output is printed as well as assigned (endemic_summary <- sl_species %>%    distinct(taxon_name, endemic) %>%    group_by(endemic) %>%    summarise(number.of.sp = n())) #> # A tibble: 2 x 2 #>   endemic number.of.sp #>   <lgl>          <int> #> 1 FALSE           3303 #> 2 TRUE              45"},{"path":"https://matildabrown.github.io/rWCVP/articles/custom-checklist.html","id":"a-checklist-of-near-endemic-species","dir":"Articles","previous_headings":"","what":"A checklist of near-endemic species","title":"","text":"Depending define near-endemics, two ways can approach filtering step. define near-endemics species occur Sierra Leone one WGSPRD3 Area (L3). data perspective, means filtering species >2 rows sl_species (row species-area occurrence). Alternatively, can consider near-endemics species might occur across border, functionally endemic. , need ) identify neighbouring WGSPRD3 Areas b) filter species list accordingly.","code":""},{"path":"https://matildabrown.github.io/rWCVP/articles/custom-checklist.html","id":"species-in-sierra-leone-plus-1-other-area","dir":"Articles","previous_headings":"A checklist of near-endemic species","what":"1. Species in Sierra Leone plus 1 other area","title":"","text":"can just directly remove species list species Sierra Leone occur 2 areas.","code":"sl_near_endemics1 <- sl_species %>%    group_by(plant_name_id, taxon_name) %>%    filter(n() < 3) %>%   ungroup()"},{"path":"https://matildabrown.github.io/rWCVP/articles/custom-checklist.html","id":"species-in-sierra-leone-and-neighbouring-areas","dir":"Articles","previous_headings":"A checklist of near-endemic species","what":"2. Species in Sierra Leone and neighbouring areas","title":"","text":"First, need identify WGSRPD Areas share border Sierra Leone. looking map, ’ll programmitically using shape files. , take WGSRPD level 3 polygons find areas border . Note, turn spherical coordinates sf using sf_use_s2(FALSE). Now list neighbouring areas, need find ones border Sierra Leone. can map region sanity-check automated neighbour detection generate final checklist.  course, just identified Guinea Liberia neighbouring countries map, found codes using get_wgsrpd3_codes(\"Liberia\") get_wgsrpd3_codes(\"Guinea\"), ’s nearly much fun! Next, can identify near-endemics species occurrences Sierra Leone, Guinea Liberia. finally filter list species occur Sierra Leone + one neighbour, like Option 1. Looking map seems plausible species occur right triple junction three countries, example exclude species.","code":"sf_use_s2(FALSE)  area_polygons <- rWCVPdata::wgsrpd3  area_neighbours <- poly2nb(area_polygons) #which polygon/s is/are Sierra Leone?  sl_index <- which(area_polygons$LEVEL3_COD %in% sl_code)  #find neighbouring polygons sl_neighbours_index <- area_neighbours[[sl_index]]  #get the polygons for Sierra Leone plus its neighbours sl_plus_neighbours <- area_polygons[c(sl_index, sl_neighbours_index),] #get a sensible bounding box for our plot bounding_box <- st_bbox(sl_plus_neighbours) xmin <- bounding_box[\"xmin\"] - 2 xmax <- bounding_box[\"xmax\"] + 2 ymin <- bounding_box[\"ymin\"] - 2 ymax <- bounding_box[\"ymax\"] + 2  #plot the map ggplot(area_polygons) +    #world polygons first, for context   geom_sf(fill=\"white\", colour=\"grey\") +    #add polygons of interest   geom_sf(data=sl_plus_neighbours, fill=\"#a4dba2\", colour=\"gray20\")+    #bounding box we sey up above   coord_sf(xlim=c(xmin, xmax), ylim=c(ymin, ymax))+   #add country name labels   geom_sf_label(data=sl_plus_neighbours,aes(label=sl_plus_neighbours$LEVEL3_NAM))+   #add ocean background   theme(panel.background = element_rect(fill=\"#b6badb\")) +   #remove x and y from axes   xlab(NULL) +   ylab(NULL) sl_near_endemics2 <- sl_species %>%    # filtering for each species   group_by(plant_name_id) %>%   # only keep those where all points are in the threee countries   filter(all(area_code_l3 %in% sl_plus_neighbours$LEVEL3_COD)) %>%   ungroup() sl_near_endemics2 <- sl_near_endemics2 %>%    group_by(plant_name_id, taxon_name) %>%    filter(n() < 3) %>%   ungroup()"},{"path":"https://matildabrown.github.io/rWCVP/articles/custom-checklist.html","id":"creating-our-formatted-report","dir":"Articles","previous_headings":"","what":"Creating our formatted report","title":"","text":"Now can something bit fancy - turn checklist data frame formatted report. , plug template file called “custom_checklist.Rmd” stored rWCVP package folder (specifically, “rmd” subfolder). pass data (well information) using params, need specify file name using output_file. file (screenshot , report left building)! example report","code":"library(rmarkdown)  #informative test to include in our html checklist_description <- \"Checklist of species that are endemic to Sierra Leone (or near-endemic, based on neighbouring countries)\"  #for file saving wd <- getwd()  #do the rendering render(system.file(\"rmd\", \"custom_checklist.Rmd\", package = \"rWCVP\"),                       quiet = TRUE,                       params=list( version = \"New Phytologist Special Issue\",                                    mydata = sl_nearendemics2,                                    description = checklist_description),        output_file = paste0(wd,\"/Sierra_Leone_endemics_and_near_endemics.html\"))"},{"path":"https://matildabrown.github.io/rWCVP/articles/mapping-diversity.html","id":"species-richness","dir":"Articles","previous_headings":"","what":"Species richness","title":"","text":"obvious place start global species richness. can use wcvp_summary condense global occurrence data species raw counts per WGSRPD Level 3 Area. gives us list, information first five slots data slot named $Summary. ’s $Summary data frame ’ll working . display using wcvp_summary_gt ’s going big table, let’s skip straight plotting. rWCVPdata includes area polygons WGSRPD Level 3 Areas - going base add things . Let’s add global_summary spatial data, plot map species richness defines colour.  Hmm, ’s pretty ’re losing islands - let’s make tweaks.  Much better!","code":"global_summary <- wcvp_summary() #> i No area specified. Generating global summary. #> i No taxon specified. Generating summary of all species. glimpse(global_summary) #> List of 6 #>  $ Taxon                               : NULL #>  $ Area                                : chr \"the world\" #>  $ Grouping_variable                   : chr \"area_code_l3\" #>  $ Total_number_of_species             : int 347525 #>  $ Number_of_regionally_endemic_species: int 347527 #>  $ Summary                             : tibble [368 x 6] (S3: tbl_df/tbl/data.frame) #>   ..$ area_code_l3: chr [1:368] \"ABT\" \"AFG\" \"AGE\" \"AGS\" ... #>   ..$ Native      : int [1:368] 1608 4510 5331 2082 5357 2990 3382 198 3506 2578 ... #>   ..$ Endemic     : int [1:368] 0 862 241 252 852 30 60 19 178 75 ... #>   ..$ Introduced  : int [1:368] 300 101 711 412 404 928 182 48 345 101 ... #>   ..$ Extinct     : int [1:368] 0 1 1 2 7 2 2 0 30 0 ... #>   ..$ Total       : int [1:368] 1908 4618 6045 2497 5769 3921 3602 246 3934 2680 ... #load the spatial data area_polygons <- rWCVPdata::wgsrpd3 %>%    #add the summary data, allowing for the different column names   left_join(global_summary$Summary, by=c(\"LEVEL3_COD\"=\"area_code_l3\"))  ggplot(area_polygons)+   geom_sf(aes(fill=Native)) #wrapping n brackets so it assigns as well as prints (p_native_richness <- ggplot(area_polygons) +   #remove borders   geom_sf(aes(fill=Native), col=\"transparent\") +   # add points for islands   stat_sf_coordinates(aes(col=Native))+   #remove borders   theme_void() +   #use a better colour palette   scale_fill_viridis_c(name = \"Native\\nspecies\")+    scale_colour_viridis_c(name = \"Native\\nspecies\")+    #remove extra whitespace   coord_sf(expand=FALSE) )"},{"path":"https://matildabrown.github.io/rWCVP/articles/mapping-diversity.html","id":"endemic-species-richness","dir":"Articles","previous_headings":"","what":"Endemic species richness","title":"","text":"can also incorporate metrics - let’s look proportion species Level 3 Area endemic Area. ’ll use slightly different colour palette , just fun.  Endemism hotspots really jump ! can use information produce table top ten. can attach variable area_polygons - doesn’t World Checklist!","code":"area_polygons <- area_polygons %>%    mutate(percent_endemic = Endemic/Native)  (p_prop_endemic <- ggplot(area_polygons) +   #remove borders   geom_sf(aes(fill=percent_endemic), col=\"transparent\") +   # add points for islands   stat_sf_coordinates(aes(col=percent_endemic))+   #remove borders   theme_void()+   #use a better colour palette   scale_fill_distiller(palette=\"Reds\", direction=1, name=\"% of species\\nthat are\\nendemic\")+    scale_colour_distiller(palette=\"Reds\", direction=1,                           name=\"% of species\\nthat are\\nendemic\")+    #remove extra whitespace   coord_sf(expand=FALSE) ) area_polygons %>%    #get the region and continent names   left_join(wgsrpd_mapping) %>%    #get the top 10   slice_max(percent_endemic,n=10) %>%    #drop the spatial data   st_drop_geometry() %>%    select(LEVEL3_NAM, percent_endemic, LEVEL1_NAM) %>%    group_by(LEVEL1_NAM) %>%    #format as a table   gt() %>%    cols_label(     percent_endemic = \"% Endemic\",     LEVEL3_NAM = \"WGSRPD Level 3 Area\"   ) %>%    tab_options(     # some nice formatting         column_labels.font.weight = \"bold\",         row_group.font.weight = \"bold\",         row_group.as_column = TRUE,         data_row.padding = px(1),         table.font.size = 12,         table_body.hlines.color = \"transparent\",         ) %>%   #format the number as %   fmt_percent(     columns = percent_endemic,     decimals = 1   ) #> Joining, by = c(\"LEVEL3_NAM\", \"LEVEL3_COD\", \"LEVEL2_COD\", \"LEVEL1_COD\")"},{"path":"https://matildabrown.github.io/rWCVP/articles/mapping-diversity.html","id":"limiting-maps-to-an-area-of-interest","dir":"Articles","previous_headings":"","what":"Limiting maps to an area of interest","title":"","text":"One example, showing can limit maps specific area interest. Let’s look orchids Africa. Remember dataset saved $Summary slot (trying join orchid_africa_summary cause error). filter polygons Africa, mapping perspective makes sense leave (though greyed ). , constrain map, need set custom limits.","code":"orchid_africa_summary <- wcvp_summary(\"Orchidaceae\", \"family\", get_wgsrpd3_codes(\"Africa\")) #> i Matches to input geography found at Continent (Level 1) #reset the spatial data by loading it in afresh area_polygons <- rWCVPdata::wgsrpd3 %>%    #add the summary data, allowing for the different column names   left_join(orchid_africa_summary$Summary, by=c(\"LEVEL3_COD\"=\"area_code_l3\")) %>%    #add continent and region names for easy filtering   left_join(wgsrpd_mapping)  #> Joining, by = c(\"LEVEL3_NAM\", \"LEVEL3_COD\", \"LEVEL2_COD\", \"LEVEL1_COD\") #get a sensible bounding box for the polygons in Africa bounding_box <- st_bbox(area_polygons %>% filter(LEVEL1_NAM ==\"AFRICA\")) #add a buffer as we set limits xmin <- bounding_box[\"xmin\"] - 2 xmax <- bounding_box[\"xmax\"] + 2 ymin <- bounding_box[\"ymin\"] - 2 ymax <- bounding_box[\"ymax\"] + 2  (p_orchids <- ggplot(area_polygons) +   #remove borders   geom_sf(aes(fill=Native), col=\"transparent\") +   # add points for islands   stat_sf_coordinates(aes(col=Native), size=4)+   #bounding box we set up above   coord_sf(xlim=c(xmin, xmax), ylim=c(ymin, ymax))+   #remove borders   theme_void()+   #set colour palette (fill for polygons, colour for points)   scale_fill_viridis_c(name = \"Native\\nspecies\")+    scale_colour_viridis_c(name = \"Native\\nspecies\")+     ggtitle(\"Orchidaceae species richness\") )"},{"path":"https://matildabrown.github.io/rWCVP/articles/occurrence-matrices.html","id":"finding-an-example-group","dir":"Articles","previous_headings":"","what":"Finding an example group","title":"","text":"example, don’t particular area group plants want examine, gives us chance showcase one functions rWCVP! want group species ) large b) distributed across WGSRPD Level 3 Areas. Brazil good potential five Level 3 Areas (good number purpose table fit portrait-oriented page). Let’s see nice-sized example genera, using wcvp_summary function:   Perfect! 23 species (rows) won’t take much space, enough occurrences make interesting.","code":"wcvp_summary(taxon=\"Myrtaceae\", taxon_rank=\"family\", area=get_wgsrpd3_codes(\"Brazil\"),                grouping_var = \"genus\") %>%    wcvp_summary_gt() wcvp_summary(taxon=\"Calycolpus\", taxon_rank=\"genus\", area=get_wgsrpd3_codes(\"Brazil\"),               grouping_var = \"area_code_l3\") %>%    wcvp_summary_gt() wcvp_summary(taxon=\"Myrciaria\", taxon_rank=\"genus\", area=get_wgsrpd3_codes(\"Brazil\"),                grouping_var=\"area_code_l3\") %>%    wcvp_summary_gt()"},{"path":"https://matildabrown.github.io/rWCVP/articles/occurrence-matrices.html","id":"generating-and-formatting-the-occurrence-matrix","dir":"Articles","previous_headings":"","what":"Generating and formatting the occurrence matrix","title":"","text":"Generating occurrence matrix genus simple using generate_occurence_matrix function. ’s OK, can make much prettier using gt package. Let’s following: remove WCVP ID column change taxon_id ‘Species’ make species names italic bold column titles reduce space around text make font size 12 remove internal borders change 1s 0s X blank Much nicer! can save gt table HTML table picture. plan making tables, can save space saving table style theme (see https://themockup.blog/posts/2020-09-26-functions--themes--gt-tables/ details ) biggest issue gt() doesn’t support Word - exporting directly docx file, check flextable (https://ardata-fr.github.io/flextable-book/). ### Including excluding occurrence types want know native introduced species? function option filter one . Brazilian Myrciaria doesn’t look interesting front (can see summary table one species introduced), let’s look invasive group - Poa Northern Europe (Level 2 Region).  can format matrix just like , let’s skip go straight introduced species . ’re formatting , also adding heading - html function makes possiible italicise genus name everything!","code":"m <- wcvp_occ_mat(taxon=\"Myrciaria\", taxon_rank=\"genus\",                                  area=get_wgsrpd3_codes(\"Brazil\")) m #> # A tibble: 23 x 7 #>    plant_name_id taxon_name             BZC   BZE   BZL   BZN   BZS #>            <dbl> <chr>                <dbl> <dbl> <dbl> <dbl> <dbl> #>  1        473796 Myrciaria alagoana       0     1     0     0     0 #>  2        534878 Myrciaria alta           0     0     1     0     0 #>  3        534776 Myrciaria cambuca        0     1     1     0     0 #>  4        131799 Myrciaria cordata        0     0     0     1     0 #>  5        131802 Myrciaria cuspidata      1     1     1     0     1 #>  6        131803 Myrciaria delicatula     1     0     1     0     1 #>  7        131806 Myrciaria disticha       0     1     1     0     0 #>  8        131810 Myrciaria dubia          1     0     0     1     0 #>  9        491614 Myrciaria evanida        0     0     1     0     0 #> 10        131814 Myrciaria ferruginea     0     1     1     0     0 #> # ... with 13 more rows m_gt <- m %>%    select(-plant_name_id) %>% #remove ID col   gt() %>%    cols_label(     taxon_name = \"Species\"   ) %>%    #make species names italic         tab_style(         style=cell_text(style=\"italic\"),         locations = cells_body(           columns= taxon_name         )       ) %>%    tab_options(     # some nice formatting         column_labels.font.weight = \"bold\",         data_row.padding = px(1),         table.font.size = 12,         table_body.hlines.color = \"transparent\",         ) %>%   # change the zeroes into blanks       text_transform(         locations = cells_body(),         fn = function(x){           ifelse(x == 0, \"\", x)         }       ) %>%    # change the 1s into X         text_transform(         locations = cells_body(),         fn = function(x){           ifelse(x == 1, \"X\", x)         }       ) m_gt occ_mat_theme <- function(x){   x %>% cols_label(     taxon_name = \"Species\"   ) %>%    #make species names italic         tab_style(         style=cell_text(style=\"italic\"),         locations = cells_body(           columns= taxon_name         )       ) %>%    tab_options(     # some nice formatting         column_labels.font.weight = \"bold\",         data_row.padding = px(1),         table.font.size = 12,         table_body.hlines.color = \"transparent\",         ) %>%   # change the zeroes into blanks       text_transform(         locations = cells_body(),         fn = function(x){           ifelse(x == 0, \"\", x)         }       ) %>%    # change the 1s into X         text_transform(         locations = cells_body(),         fn = function(x){           ifelse(x == 1, \"X\", x)         }       ) } wcvp_summary(taxon=\"Poa\", taxon_rank=\"genus\", area=get_wgsrpd3_codes(\"Northern Europe\"),                grouping_var = \"area_code_l3\") %>%    wcvp_summary_gt() m <- wcvp_occ_mat(taxon=\"Poa\", taxon_rank=\"genus\",                                 area=get_wgsrpd3_codes(\"Northern Europe\"),                                  introduced=FALSE, extinct=FALSE,                                  location_doubtful=FALSE) m #> # A tibble: 20 x 11 #>    plant_name_id taxon_name         DEN   FIN   FOR   GRB   ICE   IRE   NOR   SVA   SWE #>            <dbl> <chr>            <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1        435004 Poa abbreviata       0     0     0     0     0     0     0     1     0 #>  2        435078 Poa alpigena         0     1     1     0     1     0     1     1     1 #>  3        435085 Poa alpina           0     1     1     1     1     1     1     1     1 #>  4        435167 Poa angustifolia     1     1     0     1     0     0     1     0     1 #>  5        435194 Poa annua            1     1     1     1     1     1     1     0     1 #>  6        435235 Poa arctica          0     1     0     0     0     0     1     1     1 #>  7        435458 Poa bulbosa          1     1     0     1     0     0     1     0     1 #>  8        435622 Poa compressa        1     1     0     0     0     0     1     0     1 #>  9        435932 Poa flexuosa         0     0     0     1     1     0     1     0     1 #> 10        435996 Poa glauca           0     1     1     1     1     0     1     1     1 #> 11        436089 Poa hartzii          0     0     0     0     0     0     0     1     0 #> 12        436146 Poa humilis          1     1     1     1     1     1     1     0     1 #> 13        436189 Poa infirma          0     0     0     1     0     0     0     0     0 #> 14        436383 Poa lindebergii      0     1     0     0     0     0     1     0     1 #> 15        436600 Poa nemoralis        1     1     1     1     1     1     1     0     1 #> 16        436739 Poa palustris        1     1     0     1     0     0     1     0     1 #> 17        436906 Poa pratensis        1     1     1     1     1     1     1     1     1 #> 18        437092 Poa remota           1     1     0     0     0     0     1     0     1 #> 19        437424 Poa supina           1     1     0     0     0     0     1     0     1 #> 20        437547 Poa trivialis        1     1     1     1     1     1     1     0     1 m <- wcvp_occ_mat(taxon=\"Poa\", taxon_rank=\"genus\",                                 area=get_wgsrpd3_codes(\"Northern Europe\"),                                  native=FALSE,                                 introduced=TRUE, extinct=FALSE,                                  location_doubtful = FALSE) m %>%    select(-plant_name_id) %>% #remove ID col   gt() %>%    occ_mat_theme() %>%  #the theme we defined above   #add a header   tab_header(title=html(\"Introduced <em>Poa<\/em> species in Northern Europe\"))"},{"path":"https://matildabrown.github.io/rWCVP/articles/occurrence-matrices.html","id":"bonus-adding-a-country-spanner","dir":"Articles","previous_headings":"","what":"Bonus: adding a country spanner","title":"","text":"Tables created gt extremely flexible - let’s say want look occurrences across US-Canadian border: really useful know codes US Canada. use data included rWCVP create key.  lot can done gt - see https://gt.rstudio.com/ help, examples documentation.","code":"m <- wcvp_occ_mat(\"Fritillaria\", \"genus\",                                  area=c(\"WAS\", \"ORE\", \"IDA\",\"MNT\", \"ABT\", \"BRC\"))   m_gt <- m %>%    select(-plant_name_id) %>% #remove ID col   gt() %>%    occ_mat_theme() %>%  #the theme we defined above   #add a header   tab_header(title=html(\"<em>Fritillaria<\/em> species in Northwest USA and Southwest Canada\"))  m_gt wgsrpd_mapping %>%    filter(LEVEL3_COD %in% c(\"WAS\", \"ORE\", \"IDA\",\"MNT\", \"ABT\", \"BRC\")) %>%    select(LEVEL3_NAM, LEVEL3_COD, COUNTRY) %>%    gt() %>%    #some formatting   tab_options(         column_labels.font.weight = \"bold\",         data_row.padding = px(1),         table.font.size = 12,         table_body.hlines.color = \"transparent\",         ) m_gt %>%    tab_spanner(label=\"United States\",               columns = c(IDA, MNT, ORE, WAS)) %>%    tab_spanner(label=\"Canada\",               columns=c(ABT, BRC))"},{"path":"https://matildabrown.github.io/rWCVP/articles/rWCVP.html","id":"accessing-the-wcvp","dir":"Articles","previous_headings":"","what":"Accessing the WCVP","title":"Introduction to rWCVP","text":"functions rWCVP work, need access copy WCVP. One way load WCVP install associated data package, rWCVPdata: data package isn’t available, ’d prefer use different version WCVP, can provide local copy data main functions package. instance, generate checklist: careful ’re using WCVP version! structure WCVP tables sometimes changes versions. rWCVP set work latest version WCVP, previous versions share structure.","code":"if (!require(rWCVPdata)) {   install.packages(\"rWCVPdata\",     repos = c(       \"https://matildabrown.github.io/drat\",       \"https://cloud.r-project.org\"     )   ) }  # taxonomy data names <- rWCVPdata::wcvp_names  # distribution data distributions <- rWCVPdata::wcvp_distributions names <- read_csv(\"/path/to/wcvp_names.csv\") distributions <- read_csv(\"/path/to/wcvp_distributions.csv\")  checklist <- wcvp_checklist(\"Acacia\",   taxon_rank = \"genus\", area_codes = \"CPP\",   wcvp_names = names, wcvp_distributions = distributions )"},{"path":"https://matildabrown.github.io/rWCVP/articles/rWCVP.html","id":"filtering-the-wcvp","dir":"Articles","previous_headings":"","what":"Filtering the WCVP","title":"Introduction to rWCVP","text":"rWCVP functions involve filtering WCVP generate lists summaries vascular plant species particular areas. functions accept two arguments filtering WCVP: taxon: name valid taxon taxonomic rank species higher (e.g. species “Myrcia almasensis”, genus “Myrcia”, family “Myrtaceae”). area: vector WGSRPD level 3 codes regions want focus . arguments can combined wcvp_checklist, wcvp_occ_mat, wcvp_summary generate outputs focal taxa desired area. example, Myrtaceae species Brazil:","code":"checklist <- wcvp_checklist(\"Myrtaceae\",   taxon_rank = \"family\",   area_codes = c(\"BZC\", \"BZN\", \"BZS\", \"BZE\", \"BZL\") )"},{"path":"https://matildabrown.github.io/rWCVP/articles/rWCVP.html","id":"a-note-on-filtering-by-taxon","dir":"Articles","previous_headings":"Filtering the WCVP","what":"A note on filtering by taxon","title":"Introduction to rWCVP","text":"filtering taxon, need tell function taxonomic rank name ’re providing using taxon.rank argument. example, making summary table genus Poa: can provide taxon names ranks species, genus, family, order, higher. WCVP provides taxonomic information family rank. included table called taxonomic_mapping map families orders higher taxonomies, based APG IV. use table behind scenes allow filter using higher taxonomic ranks. example, making summary table Poales:","code":"wcvp_summary(\"Poa\", taxon_rank = \"genus\") #> $Taxon #> [1] \"Poa\" #>  #> $Area #> [1] \"the world\" #>  #> $Grouping_variable #> [1] \"area_code_l3\" #>  #> $Total_number_of_species #> [1] 573 #>  #> $Number_of_regionally_endemic_species #> [1] 573 #>  #> $Summary #> # A tibble: 280 × 6 #>    area_code_l3 Native Endemic Introduced Extinct Total #>    <chr>         <int>   <int>      <int>   <int> <int> #>  1 ABT              21       0          5       0    26 #>  2 AFG              23       1          0       0    23 #>  3 AGE              13       2          5       0    18 #>  4 AGS              24       0         10       0    34 #>  5 AGW              34       8          3       0    37 #>  6 ALA               6       0          3       0     9 #>  7 ALB              17       0          0       0    17 #>  8 ALG               8       0          1       0    11 #>  9 ALT              30       3          1       0    31 #> 10 ALU               7       0          3       0    10 #> # … with 270 more rows head(taxonomic_mapping) #>        higher       order          family #> 1 Angiosperms    Acorales       Acoraceae #> 2 Angiosperms Alismatales    Alismataceae #> 3 Angiosperms Alismatales Aponogetonaceae #> 4 Angiosperms Alismatales         Araceae #> 5 Angiosperms Alismatales      Butomaceae #> 6 Angiosperms Alismatales   Cymodoceaceae wcvp_summary(\"Poales\", taxon_rank = \"order\") #> $Taxon #> [1] \"Poales\" #>  #> $Area #> [1] \"the world\" #>  #> $Grouping_variable #> [1] \"area_code_l3\" #>  #> $Total_number_of_species #> [1] 23770 #>  #> $Number_of_regionally_endemic_species #> [1] 23770 #>  #> $Summary #> # A tibble: 368 × 6 #>    area_code_l3 Native Endemic Introduced Extinct Total #>    <chr>         <int>   <int>      <int>   <int> <int> #>  1 ABT             359       0         70       0   429 #>  2 AFG             485      16         15       0   504 #>  3 AGE             908      31        166       0  1074 #>  4 AGS             389      20         88       0   477 #>  5 AGW             890     130        105       0   995 #>  6 ALA             711       2        153       0   864 #>  7 ALB             363       4         14       0   387 #>  8 ALD              44       7         13       0    57 #>  9 ALG             445      11         41       0   497 #> 10 ALT             383       9          6       0   389 #> # … with 358 more rows"},{"path":"https://matildabrown.github.io/rWCVP/articles/rWCVP.html","id":"a-note-on-filtering-by-area","dir":"Articles","previous_headings":"Filtering the WCVP","what":"A note on filtering by area","title":"Introduction to rWCVP","text":"WCVP lists taxon distributions using World Geographic Scheme Recording Plant Distributions (WGSRPD) level 3. level corresponds “botanical countries”, mostly follow boundaries countries, except large countries split outlying areas omitted. functions rWCVP expect area provided vector WGSRPD level 3 codes. can annoying look entire region ’re interested . example, filter species Brazil need provide vector 5 codes. make things easier, rWCVP function converts name region vector WGSRPD level 3 codes. can input directly functions filter WCVP area.","code":"get_wgsrpd3_codes(\"Brazil\") #> [1] \"BZC\" \"BZE\" \"BZL\" \"BZN\" \"BZS\" wcvp_summary(\"Poa\", taxon_rank = \"genus\", area = get_wgsrpd3_codes(\"Southern Hemisphere\")) #> $Taxon #> [1] \"Poa\" #>  #> $Area #> [1] \"Southern Hemisphere (incl. equatorial Level 3 areas)\" #>  #> $Grouping_variable #> [1] \"area_code_l3\" #>  #> $Total_number_of_species #> [1] 264 #>  #> $Number_of_regionally_endemic_species #> [1] 237 #>  #> $Summary #> # A tibble: 74 × 6 #>    area_code_l3 Native Endemic Introduced Extinct Total #>    <chr>         <int>   <int>      <int>   <int> <int> #>  1 AGE              13       2          5       0    18 #>  2 AGS              24       0         10       0    34 #>  3 AGW              34       8          3       0    37 #>  4 ANT               0       0          1       0     1 #>  5 ASC               0       0          1       0     1 #>  6 ASP               2       1          3       0     5 #>  7 ATP               8       1          3       0    11 #>  8 BOL              31       2          3       0    34 #>  9 BOR               2       1          0       0     2 #> 10 BUR               3       0          0       0     3 #> # … with 64 more rows"},{"path":"https://matildabrown.github.io/rWCVP/articles/redlist-name-matching.html","id":"example-dataset-the-iucn-red-list","dir":"Articles","previous_headings":"","what":"Example dataset: the IUCN Red List","title":"","text":"example ’ll use matching assessments IUCN Red List Threatened Species (Red List) accepted names WCVP. ’re using download plant assessments version 2022-1 Red List, made website. Now ’ve loaded names Red List, can match WCVP using wcvp_match_names function. function takes data frame names matching, name column data frame storing names, (optionally) name column storing authors name, want include matching process. function first try find names match exactly names WCVP. author column provided, first step include authors second step run match remaining names exactly without author strings. remaining unmatched names passed fuzzy matching process tries match names phonetically finds similar name Levenshtein distance. haven’t explicitly passed data frame names WCVP, get warning using date version via rWCVPdata package. can ignore warning now package (therefore tutorial) developed using version data currently website. also get series messages, giving us idea proportion exact matched, long can expect fuzzy matching take. ’s finished, get full summary many names matched, many used fuzzy matching, many matched multiple names WCVP. output wcvp_match_names data frame original names, names match WCVP, information matched close fuzzy matches .","code":"redlist <- read_csv(   \"../../inst/extdata/redlist-summary_2022-1.csv\",   col_types=cols(.default=col_character()) )  glimpse(redlist) #> Rows: 61,015 #> Columns: 3 #> $ scientific_name <chr> \"Cotoneaster granatensis\", \"Juniperus drupacea\", \"Picea omorika\",~ #> $ authority       <chr> \"Boiss.\", \"Labill.\", \"(Pancic) Purk.\", \"Boiss.\", \"Steud. &amp; Ho~ #> $ category        <chr> \"LR/cd\", \"LC\", \"EN\", \"VU\", \"LC\", \"EN\", \"VU\", \"LC\", \"EN\", \"CR\", \"N~ matches <- wcvp_match_names(redlist,                        name_col=\"scientific_name\",                        author_col=\"authority\",                        fuzzy=TRUE,                        progress_bar=FALSE) #>  #> -- Matching names to WCVP --------------------------------- #> i Using the `scientific_name` column #>  #> -- Exact matching 61015 names -- #>  #> v Found 60165 of 61015 names #>  #> -- Fuzzy matching 850 names -- #>  #>  v Found 826 of 850 names   -- Matching complete! --   v Matched 60928 of 61015 names  i Exact (with author): 43268  i Exact (without author): 16897  i Fuzzy (edit distance): 398  i Fuzzy (phonetic): 365  ! Names with multiple matches: 391"},{"path":"https://matildabrown.github.io/rWCVP/articles/redlist-name-matching.html","id":"resolving-matched-names-to-accepted-species","dir":"Articles","previous_headings":"","what":"Resolving matched names to accepted species","title":"","text":"Now ’ve matched names, can resolve fuzzy matches names matched multiple entries WCVP, make sure assessed species linked accepted names WCVP. choose fuzzy matches valid resolve multiple matches ultimately depend reason matching. instance, ’re matching IUCN assessments accepted names WCVP. application, assessment valid particular taxonomic concept, might care resolving anything matched non-homotypic synonym. case tutorial, ’ve tried resolve many fuzzy multiple matches possible first, filtering matches aren’t appropriate application.","code":""},{"path":"https://matildabrown.github.io/rWCVP/articles/redlist-name-matching.html","id":"fuzzy-matches","dir":"Articles","previous_headings":"Resolving matched names to accepted species","what":"Fuzzy matches","title":"","text":"many fuzzy matches (around 1000) still lot manually verify, let’s bit pre-checking based following rules: want manually verify anything <90% similar. fuzzy match identical author string ≥90% similar, keep . fuzzy match one letter (.e. edit distance 1) ≥90% similar, keep . Let’s apply . great start! half fuzzy matches can resolved without looking . edit distance 2 - surely ’s still pretty close? Hmm, clearly ! really wanted continue algorithmically, take random sample 100 names test accurate various rules - example using similarity, see Supporting Information Nic Lughadha et al. (2020). However, point, quick glance name going give accurate result faster. took hour eyeball Excel; marked good matches 1 keep column, bad matches 0. , deleted match data except match_type multiple_matches bad matches, added new column resolved_match_type. left blank good matches, filled “Fuzzy match rejected” bad matches. Now, read file back . far ’ve kept number rows - don’t want get rid bad matches (yet).","code":"fuzzy_matches <- matches %>%   filter(str_detect(match_type, \"Fuzzy\")) %>%   mutate(     keep = case_when( #set up a keep column       match_similarity < 0.9 ~ NA_real_, # fill with blank for dissimilar names       wcvp_author_edit_distance == 0 ~ 1, # fill with 1 if authors identical       match_edit_distance == 1 ~ 1, # fill with 1 if only one letter different     )   )  #how many did this resolve? table(fuzzy_matches$keep, useNA = \"always\") #>  #>    1 <NA>  #>  534  317 fuzzy_matches %>%   filter(match_edit_distance == 2,          !multiple_matches,          match_similarity > 0.9          ) %>%   arrange(desc(wcvp_author_edit_distance)) %>% #sort by least similar authors first   select(scientific_name, authority, match_type,wcvp_name, wcvp_authors) %>%   head() #> # A tibble: 6 x 5 #>   scientific_name          authority                           match_type   wcvp_~1 wcvp_~2 #>   <chr>                    <chr>                               <chr>        <chr>   <chr>   #> 1 Diospyros tampolensis    H.N.Rakouth, G.E.Schatz &amp; Lowry Fuzzy (edit~ Diospy~ H.Perr~ #> 2 Diospyros crassifolia    A.G.Linan, G.E.Schatz &amp; Lowry   Fuzzy (edit~ Diospy~ D.Don   #> 3 Diospyros nitidifolia    A.G.Linan, G.E.Schatz &amp; Lowry   Fuzzy (edit~ Diospy~ Elmer   #> 4 Garcinia eugeniaefolia   Wall                                Fuzzy (phon~ Garcin~ (Chois~ #> 5 Hebepetalum humiriifolia (Planch.) Benth.                    Fuzzy (edit~ Hebepe~ (Planc~ #> 6 Diospyros ambanjensis    G.E.Schatz &amp; Lowry              Fuzzy (edit~ Diospy~ Gürke   #> # ... with abbreviated variable names 1: wcvp_name, 2: wcvp_authors write_csv(fuzzy_matches, \"redlist-fuzzy-tocheck.csv\") fuzzy_checked <-   read_csv(\"../../inst/extdata/redlist-fuzzy-checked.csv\",            show_col_types=FALSE) %>%   select(-keep) %>%   mutate(resolved_match_type=ifelse(! is.na(resolved_match_type),                                     resolved_match_type,                                     match_type))  checked_matches <- matches %>%   filter(! str_detect(match_type, \"Fuzzy\")) %>%   bind_rows(fuzzy_checked)"},{"path":"https://matildabrown.github.io/rWCVP/articles/redlist-name-matching.html","id":"multiple-matches","dir":"Articles","previous_headings":"Resolving matched names to accepted species","what":"Multiple matches","title":"","text":"Now need deal multiple matches. , can use rules automatically resolve : Filter matches using author information. one matches author string, keep . one (one) matches Accepted, keep one. one (one) matches Synonym (opposed Invalid, Illegitimate, etc), keep one. ’ll write rules function. Now go name multiple matches apply rules. automatic resolution ? Hmm, still ~90 names (less 1% original dataset) couldn’t find match . datasets, acceptable loss, particular data used several papers, ’s worth going carefully. ’s one prepared earlier. example, many unmatched names new species added WCVP (sometimes listed e.g. Heptapleurum sp.), making quicker searching every name individually. Still, ’s time consuming process relatively small success rate (, found names 95), applicable (even ) name-matching workflows. need re-run matching manually matched names, get rest info. produced couple multiple matches . avoided entering WCVP ID wanted rather name. case, affects couple records. Looking , extra names illegitimate, can just quickly filter . now ’ll insert back match results remove anything remains unmatched. Finally, ’ll take look summary name resolution nicely formatted table. Great!","code":"# resolve multiple matches function #### resolve_multi <- function(df) {   if (nrow(df) == 1) {     return(df)   }    # some fuzzy matches are rejected from the previous section   valid_matches <- filter(df, !is.na(match_similarity))    if (nrow(valid_matches) == 0) {     return(head(df, 1))   }    matching_authors <-     valid_matches %>%     filter(wcvp_author_edit_distance == 0 | ! sum(wcvp_author_edit_distance == 0,                                                   na.rm=TRUE))    if (nrow(matching_authors) == 1) {     return(matching_authors)   }    accepted_names <-     matching_authors %>%     filter(wcvp_status == \"Accepted\" | ! sum(wcvp_status == \"Accepted\"))    if (nrow(accepted_names) == 1) {     return(accepted_names)   }    synonym_codes <- c(\"Synonym\", \"Orthographic\", \"Artificial Hybrid\", \"Unplaced\")   synonyms <-     accepted_names %>%     filter(wcvp_status %in% synonym_codes | ! sum(wcvp_status %in% synonym_codes))    if (nrow(synonyms) == 1)  {     return(synonyms)   }    n_matches <- length(unique(synonyms$wcvp_accepted_id)) / nrow(synonyms)   final <- head(synonyms, 1)    if (n_matches != 1) {     final <-       final %>%       mutate(         across(wcvp_id:resolved_match_type & where(is.numeric), ~NA_real_),         across(wcvp_id:resolved_match_type & where(is.character), ~NA_character_),         resolved_match_type=\"Could not resolve multiple matches\"       )   }    final } auto_resolved <-   checked_matches %>%   nest_by(scientific_name) %>%   mutate(data=list(resolve_multi(data))) %>%   unnest(col=data) %>%   ungroup()  auto_resolved <-   auto_resolved %>%   mutate(resolved_match_type=case_when(     is.na(resolved_match_type) & is.na(match_type) ~ \"No match found\",     is.na(resolved_match_type) ~ match_type,     TRUE ~ resolved_match_type   )) count(auto_resolved, resolved_match_type) #> # A tibble: 6 x 2 #>   resolved_match_type                    n #>   <chr>                              <int> #> 1 Could not resolve multiple matches     6 #> 2 Exact (with author)                43266 #> 3 Exact (without author)             16893 #> 4 Fuzzy (edit distance)                323 #> 5 Fuzzy (phonetic)                     350 #> 6 Fuzzy match rejected                  90 auto_resolved %>%   filter(resolved_match_type %in% c(\"No match found\",\"Fuzzy match rejected\")) %>%   write_csv(\"redlist_tomanuallymatch.csv\") manually_resolved <- read_csv(\"../../inst/extdata/redlist-manually-matched.csv\",                               show_col_types=FALSE) count(manually_resolved, resolved_match_type) #> # A tibble: 3 x 2 #>   resolved_match_type         n #>   <chr>                   <int> #> 1 Manually matched           14 #> 2 New/undescribed species    55 #> 3 No valid match found       21 manually_resolved <-   manually_resolved %>%   wcvp_match_names(name_col = \"manually_entered_name\", fuzzy=FALSE) #>  #> -- Matching names to WCVP ----------------------------------------------------------------- #> i Using the `manually_entered_name` column #> ! No author information supplied - matching on taxon name only #>  #> -- Exact matching  names -- #>  #> v Found 13 of  names #>  #> -- Matching complete! -- #>  #> v Matched 13 of 15 names #> i Exact (without author): 13 #> i No match found: 2 #> ! Names with multiple matches: 0 manually_resolved <- filter(manually_resolved, wcvp_status != \"Illegitimate\") resolved_matches <-   manually_resolved %>%   select(-c(manually_entered_name, Notes, match_type, multiple_matches,             match_similarity, match_edit_distance)) %>%   rename(match_type=original_match_type) %>%   bind_rows(     auto_resolved %>%     filter(! scientific_name %in% manually_resolved$scientific_name)   ) resolved_matches %>%   count(resolved_match_type, sort=TRUE) %>%   gt(rowname_col = \"resolved_match_type\") %>%   tab_options(table_body.hlines.color = \"transparent\",               column_labels.hidden = TRUE) %>%   summary_rows(     columns = c(n),     fns = list(Total =\"sum\"),     formatter = fmt_integer   ) %>%   tab_style(     style = list(       cell_text(align = \"left\")     ),     locations = cells_stub()   ) %>%   tab_header(\"Match summary\", \"(after resolution of fuzzy and multiple matches)\") %>%   opt_align_table_header(align = \"left\")"},{"path":"https://matildabrown.github.io/rWCVP/articles/redlist-name-matching.html","id":"linking-assessments-to-accepted-names","dir":"Articles","previous_headings":"Resolving matched names to accepted species","what":"Linking assessments to accepted names","title":"","text":"one last step ’re finished resolving name matches - linking Red List assessment accepted species name. things get little tricky - synonyms, need consider name change affects assessment. Specifically, can apply new name assessment taxonomic concept preserved.  Luckily, can use homotypic_synonym column WCVP easily filter matches. ’ll add full WCVP data, using wcvp_accepted_id join plant_name_id. want flag names matched accepted species matched homotypic synonyms link accepted species. Still vast majority!","code":"# a for accepted accepted_matches <- resolved_matches %>%   left_join(rWCVPdata::wcvp_names, by=c(\"wcvp_accepted_id\"=\"plant_name_id\")) %>%   mutate(keep=case_when(     taxon_status == \"Accepted\" & (wcvp_status != \"Synonym\" | wcvp_homotypic) ~       \"Matched to an accepted name\",     TRUE ~ \"Not matched to an accepted name\"   ))  count(accepted_matches, keep) #> # A tibble: 2 x 2 #>   keep                                n #>   <chr>                           <int> #> 1 Matched to an accepted name     59084 #> 2 Not matched to an accepted name  1844"},{"path":"https://matildabrown.github.io/rWCVP/articles/redlist-name-matching.html","id":"visualising-the-matching-process","dir":"Articles","previous_headings":"","what":"Visualising the matching process","title":"","text":"One thing might want , check matching process went, visualise proportion names going type matching. alluvial diagram offers one way .  Clearly, vast majority names exact matches (without author string) needed resolution. exclude , effectively zooming lower part figure, can see detail less straightforward matches.","code":"step1_codes <- c(\"Exact (with author)\"=\"Exact\",                  \"Exact (without author)\"=\"Exact\",                  \"Fuzzy (edit distance)\"=\"Fuzzy\",                  \"Fuzzy (phonetic)\"=\"Fuzzy\") step2_codes <- c(\"Exact (without author)\"=\"\\U2713\",                  \"Exact (with author)\"=\"\\U2713\",                  \"Fuzzy (edit distance)\"=\"\\U2713\",                  \"Fuzzy (phonetic)\"=\"\\U2713\",                  \"Could not resolve multiple matches\"=\"\\U2716\",                  \"Fuzzy match rejected\"=\"\\U2716\",                  \"No match found\"=\"\\U2716\") plot_data <-   accepted_matches %>%   mutate(step0=\"Input\",          step1=recode(match_type, !!! step1_codes),          step2=recode(resolved_match_type, !!! step2_codes),          step3=ifelse(keep == \"Matched to an accepted name\", \"\\U2713\", \"\\U2716\")) %>%   replace_na(list(multiple_matches=FALSE)) %>%   mutate(scenario=paste0(step1, step2, step3)) %>%   count(step0, step1, step2, step3, scenario) %>%   mutate(colour_key=step3) %>%   to_lodes_form(axes=c(1:4), id=\"scenario\") %>%   group_by(x, stratum) %>%   mutate(label=ifelse(row_number() == 1, as.character(stratum), NA_character_),          total=sum(n)) %>%   ungroup() %>%   mutate(label=ifelse(total < 1500, NA_character_, label))   plot_data %>%   ggplot(mapping=aes(x=x, y=n, stratum=stratum, alluvium=scenario, fill=colour_key)) +   scale_fill_brewer(palette=\"Set2\") +   geom_flow(stat=\"alluvium\", lode.guidance=\"frontback\", color=\"darkgrey\",             aes.flow=\"forward\") +   geom_stratum() +   geom_text(mapping=aes(label=label), vjust=0.75, size=4) +   annotate(\"text\", x=c(2, 3, 4), y=rep(61371 * 1.03, 3),            label=c(\"Initial\", \"Resolved\", \"Accepted\"), size=5) +   guides(fill=\"none\") +   theme_void() plot_data <-   accepted_matches %>%   mutate(step1=str_replace(match_type, \"\\\\(\", \"\\n\\\\(\"),          step2=str_replace(resolved_match_type, \"\\\\(\", \"\\n\\\\(\"),          step3=ifelse(keep == \"Matched to an accepted name\", \"\\U2713\", \"\\U2716\")) %>%   mutate(scenario=paste0(step1, step2, step3)) %>%   count(step1, step2, step3, scenario) %>%   mutate(colour_key=step3) %>%   to_lodes_form(axes=c(1:3), id=\"scenario\") %>%   mutate(label1=ifelse(stratum %in% c(\"\\U2713\", \"\\U2716\"),                        as.character(stratum), NA_character_),          label2=ifelse(! stratum %in% c(\"\\U2713\", \"\\U2716\"),                        as.character(stratum), NA_character_))   plot_data %>%   #filter out the big categories   filter(n < 4000) %>%   ggplot(aes(x=x, y=n, stratum=stratum, alluvium=scenario, fill=colour_key)) +   scale_fill_brewer(palette = \"Set2\") +   geom_flow(stat=\"alluvium\", lode.guidance=\"frontback\",             color=\"darkgray\", aes.flow=\"forward\") +   geom_stratum() +   theme_void()+   geom_text(mapping=aes(label=label1), stat=\"stratum\", size=8) +   geom_text(mapping=aes(label=label2), stat = \"stratum\", size=4) +   annotate(\"text\", x=c(1, 2, 3), y=2950, label=c(\"Initial\", \"Resolved\", \"Accepted\")) +   annotate(\"text\", x=3.4, y=1000,            label=\"e.g. heterotypic \\nsynonyms, \\nunplaced names\", size=4) +   theme(legend.position = \"none\")"},{"path":"https://matildabrown.github.io/rWCVP/articles/redlist-name-matching.html","id":"getting-a-final-dataset","dir":"Articles","previous_headings":"","what":"Getting a final dataset","title":"","text":"Finally, want turn large data frame something manageable can use downstream analyses, filtering unsuccessful matches reducing number columns (plus renaming intuitive). , just example downstream analysis, might want show number accepted species Red List category.","code":"final_matches <-   accepted_matches %>%   filter(keep == \"Matched to an accepted name\") %>%   select(scientific_name, authority, category,          match_name=wcvp_name, match_status=wcvp_status,          accepted_plant_name_id=wcvp_accepted_id, ipni_id,          accepted_taxon_name=taxon_name, accepted_taxon_authors=taxon_authors)  glimpse(final_matches) #> Rows: 59,084 #> Columns: 9 #> $ scientific_name        <chr> \"Actinodaphne leiantha\", \"Camellia dongnaiensis\", \"Carex c~ #> $ authority              <chr> \"Hook.f.\", \"Orel\", \"Nees\", \"Lapeyr.\", \"(Speg.) D.R.Hunt\", ~ #> $ category               <chr> \"DD\", \"CR\", \"LC\", \"LC\", \"LC\", \"LC\", \"LC\", \"NT\", \"DD\", \"DD\"~ #> $ match_name             <chr> \"Actinodaphne leiophylla\", \"Camellia dongnaicensis\", \"Care~ #> $ match_status           <chr> \"Accepted\", \"Accepted\", \"Accepted\", \"Accepted\", \"Accepted\"~ #> $ accepted_plant_name_id <dbl> 2620909, 2694538, 225431, 228432, 2783444, 73175, 111885, ~ #> $ ipni_id                <chr> \"462276-1\", \"60443091-2\", \"298997-1\", \"300830-1\", \"963225-~ #> $ accepted_taxon_name    <chr> \"Actinodaphne leiophylla\", \"Camellia dongnaicensis\", \"Care~ #> $ accepted_taxon_authors <chr> \"(Kurz) Hook.f.\", \"Orel\", \"L.\", \"Lapeyr.\", \"(Speg.) D.R.Hu~ cat_order <- c(\"DD\", \"LC or LR/lc\", \"NT or LR/nt\", \"LR/cd\", \"VU\", \"EN\", \"CR\",                \"EW\", \"EX\") cat_colors <- c(\"DD\"=\"#D1D1C6\", \"LC or LR/lc\"=\"#60C659\", \"NT or LR/nt\"=\"#CCE226\",                 \"LR/cd\"=\"#e4d354\", \"VU\"=\"#F9E814\", \"EN\"=\"#FC7F3F\", \"CR\"=\"#D81E05\",                 \"EW\"=\"#542344\", \"EX\"=\"#000000\")  final_matches %>%   mutate(category=recode(category, \"LC\"=\"LC or LR/lc\", \"LR/lc\"=\"LC or LR/lc\",                          \"NT\"=\"NT or LR/nt\", \"LR/nt\"=\"NT or LR/nt\"),          category=factor(category, levels=cat_order, ordered=TRUE)) %>%   count(category) %>%   mutate(p=n / sum(n)) %>%   ggplot(mapping=aes(x=category, y=n, fill=category)) +   geom_col() +   geom_text(mapping=aes(label=scales::percent_format(accuracy=0.1)(p)), vjust=-0.5) +   scale_fill_manual(values=cat_colors) +   guides(fill=\"none\") +   labs(x=\"\", y=\"Species\")"},{"path":"https://matildabrown.github.io/rWCVP/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matilda Brown. Author, maintainer. Barnaby Walker. Author.","code":""},{"path":"https://matildabrown.github.io/rWCVP/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Brown M.J.M., Walker B.E., Black N., Govaerts R., Ondo ., Turner R., Nic Lughadha E. (accepted pending minor revisions). rWCVP: companion R package World Checklist Vascular Plants. New Phytologist. version 1.0.3.","code":"@Article{,   author = {Matilda J. M. Brown and Barnaby E. Walker and Nicholas Black and Rafaël Govaerts and Ian Ondo and Robert Turner and Eimear {Nic Lughadha}},   note = {version 1.0.3},   year = {2023},   journal = {New Phytologist},   title = {rWCVP: A companion R package to the World Checklist of Vascular Plants.}, }"},{"path":"https://matildabrown.github.io/rWCVP/index.html","id":"rwcvp","dir":"","previous_headings":"","what":"Generating Summaries, Reports and Plots from the World Checklist of Vascular Plants","title":"Generating Summaries, Reports and Plots from the World Checklist of Vascular Plants","text":"rWCVP package accessing using plant name distribution data World Checklist Vascular Plants","code":""},{"path":"https://matildabrown.github.io/rWCVP/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generating Summaries, Reports and Plots from the World Checklist of Vascular Plants","text":"can install development version rWCVP GitHub :","code":"# install.packages(\"remotes\") devtools::install_github(\"matildabrown/rWCVP\")"},{"path":"https://matildabrown.github.io/rWCVP/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generating Summaries, Reports and Plots from the World Checklist of Vascular Plants","text":"rWCVP makes easy get plot known distribution plant species.","code":"library(rWCVP)  distribution <- wcvp_distribution(\"Myrcia guianensis\", taxon_rank=\"species\")  # global map wcvp_distribution_map(distribution)  # zoomed-in map wcvp_distribution_map(distribution, crop_map=TRUE)"},{"path":"https://matildabrown.github.io/rWCVP/reference/get_area_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get area description from vector of area codes — get_area_name","title":"Get area description from vector of area codes — get_area_name","text":"Get area description vector area codes","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/get_area_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get area description from vector of area codes — get_area_name","text":"","code":"get_area_name(area_codes)"},{"path":"https://matildabrown.github.io/rWCVP/reference/get_area_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get area description from vector of area codes — get_area_name","text":"area_codes Character vector containing set codes mapped name.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/get_area_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get area description from vector of area codes — get_area_name","text":"Character. Either vector length one, name set Level 3 areas, (name exists set areas) input vector codes.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/get_area_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get area description from vector of area codes — get_area_name","text":"Usually used inverse function get_wgsrpd3_codes. Useful condensing sets codes e.g. file names, plotting table formatting.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/get_area_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get area description from vector of area codes — get_area_name","text":"","code":"get_area_name(get_wgsrpd3_codes(\"Brazil\")) #> ℹ Matches to input geography found at Country (Gallagher) and Region (Level 2) #> [1] \"Brazil\""},{"path":"https://matildabrown.github.io/rWCVP/reference/get_wgsrpd3_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract WGSRPD Level 3 (area) codes. — get_wgsrpd3_codes","title":"Extract WGSRPD Level 3 (area) codes. — get_wgsrpd3_codes","text":"Extract WGSRPD Level 3 (area) codes.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/get_wgsrpd3_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract WGSRPD Level 3 (area) codes. — get_wgsrpd3_codes","text":"","code":"get_wgsrpd3_codes(geography, include_equatorial = NULL)"},{"path":"https://matildabrown.github.io/rWCVP/reference/get_wgsrpd3_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract WGSRPD Level 3 (area) codes. — get_wgsrpd3_codes","text":"geography Character. geography convert Level 3 codes. May WGSRPD area (Level 3), region (Level 2) continent (Level 1), country (political) hemisphere (\"Northern Hemisphere\", \"Southern Hemisphere\" \"Equatorial\") include_equatorial Logical. Include Level 3 areas span equator? Defaults NULL, generates message includes areas. Ignored geography hemisphere.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/get_wgsrpd3_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract WGSRPD Level 3 (area) codes. — get_wgsrpd3_codes","text":"Character area codes (Level 3) fall within geography.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/get_wgsrpd3_codes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract WGSRPD Level 3 (area) codes. — get_wgsrpd3_codes","text":"Country mapping follows Gallagher et al. (2020). Importantly, means overseas territories considered part country system, e.g. Canary Islands designated Level 3 area, rather part Spain mapping. ambiguous, mapping can explored using View(wgsrpd_mapping). Gallagher, R. V., Allen, S., Rivers, M. C., Allen, . P., Butt, N., Keith, D., & Adams, V. M. (2020). Global shortfalls extinction risk assessments endemic flora. bioRxiv, 2020.2003.2012.984559. https://doi.org/10.1101/2020.03.12.984559","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/get_wgsrpd3_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract WGSRPD Level 3 (area) codes. — get_wgsrpd3_codes","text":"","code":"get_wgsrpd3_codes(\"Brazil\") #> ℹ Matches to input geography found at Country (Gallagher) and Region (Level 2) #> [1] \"BZC\" \"BZE\" \"BZL\" \"BZN\" \"BZS\""},{"path":"https://matildabrown.github.io/rWCVP/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://matildabrown.github.io/rWCVP/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/powo_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a POWO style map for given range and range centroids. — powo_map","title":"Plot a POWO style map for given range and range centroids. — powo_map","text":"Plot POWO style map given range range centroids.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/powo_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a POWO style map for given range and range centroids. — powo_map","text":"","code":"powo_map(range_sf, centroids_sf)"},{"path":"https://matildabrown.github.io/rWCVP/reference/powo_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a POWO style map for given range and range centroids. — powo_map","text":"range_sf simple features (sf) data frame range polygons centroids_sf simple features (sf) data frame range centroids","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/powo_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a POWO style map for given range and range centroids. — powo_map","text":"ggplot map range","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/powo_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"POWO colour palette for range maps — powo_pal","title":"POWO colour palette for range maps — powo_pal","text":"Range maps displayed POWO website fixed, discrete colour palette based type taxon occurrence region.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/powo_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POWO colour palette for range maps — powo_pal","text":"","code":"powo_pal()  scale_color_powo(...)  scale_colour_powo(...)  scale_fill_powo(...)"},{"path":"https://matildabrown.github.io/rWCVP/reference/powo_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POWO colour palette for range maps — powo_pal","text":"... Arguments passed discrete_scale palette palette function called single integer argument (number levels scale) returns values take (e.g., scales::hue_pal()). limits One : NULL use default scale values character vector defines possible values scale order function accepts existing (automatic) values returns new ones. Also accepts rlang lambda function notation. drop unused factor levels omitted scale? default, TRUE, uses levels appear data; FALSE uses levels factor. na.translate Unlike continuous scales, discrete scales can easily show missing values, default. want remove missing values discrete scale, specify na.translate = FALSE. scale_name name scale used error messages associated scale. name name scale. Used axis legend title. waiver(), default, name scale taken first mapping used aesthetic. NULL, legend title omitted. labels One : NULL labels waiver() default labels computed transformation object character vector giving labels (must length breaks) function takes breaks input returns labels output. Also accepts rlang lambda function notation. guide function used create guide name. See guides() information. super super class use constructed scale","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/redlist_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset for name matching — redlist_example","title":"Example dataset for name matching — redlist_example","text":"dataset containing 20 sampled Red List assessments name-matching","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/redlist_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataset for name matching — redlist_example","text":"","code":"redlist_example"},{"path":"https://matildabrown.github.io/rWCVP/reference/redlist_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset for name matching — redlist_example","text":"data frame 20 rows 4 variables: assessmentId Red List identifier scientificName Taxon name. redlistCategory Red List threat category authority Taxon author/s.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/redlist_example.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example dataset for name matching — redlist_example","text":"Downloaded sampled https://www.iucnredlist.org/","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/taxonomic_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Data for mapping plant family to order or higher classification — taxonomic_mapping","title":"Data for mapping plant family to order or higher classification — taxonomic_mapping","text":"dataset containing higher classification (Angiosperms, Gymnosperms, Ferns Lycophytes) Order family WCVP.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/taxonomic_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data for mapping plant family to order or higher classification — taxonomic_mapping","text":"","code":"taxonomic_mapping"},{"path":"https://matildabrown.github.io/rWCVP/reference/taxonomic_mapping.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data for mapping plant family to order or higher classification — taxonomic_mapping","text":"data frame 457 rows 3 variables: family, order higher_classification","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/taxonomic_mapping.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data for mapping plant family to order or higher classification — taxonomic_mapping","text":"Fern lycophyte taxonomy PPG (2016; https://doi.org/10.1111/jse.12229). Angiosperm taxonomy APG IV (2016; https://doi.org/10.1111/boj.12385). Gymnosperm taxonomy Forest et al (2018; https://doi.org/10.1038/s41598-018-24365-4)","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_checklist.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a species checklist from WCVP — wcvp_checklist","title":"Generate a species checklist from WCVP — wcvp_checklist","text":"Generate species checklist WCVP","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_checklist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a species checklist from WCVP — wcvp_checklist","text":"","code":"wcvp_checklist(   taxon = NULL,   taxon_rank = c(\"species\", \"genus\", \"family\", \"order\", \"higher\"),   area_codes = NULL,   synonyms = TRUE,   render_report = FALSE,   native = TRUE,   introduced = TRUE,   extinct = TRUE,   location_doubtful = TRUE,   hybrids = FALSE,   infraspecies = TRUE,   report_filename = NULL,   report_dir = NULL,   report_type = c(\"alphabetical\", \"taxonomic\"),   wcvp_names = NULL,   wcvp_distributions = NULL )"},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_checklist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a species checklist from WCVP — wcvp_checklist","text":"taxon Character. Taxon included. Defaults NULL (taxonomic filter; taxa). taxon_rank Character. One \"species\", \"genus\", \"family\", \"order\" \"higher\", giving rank value/s taxon. Must specified unless taxon NULL. area_codes Character. One many WGSPRD level 3 region codes. Defaults NULL (global). synonyms Logical. Include synonyms checklist (see Details)? Defaults TRUE. render_report Logical. Render checklist markdown report? Defaults FALSE. native Logical. Include species occurrences flagged introduced, extinct doubtful? Defaults TRUE. introduced Logical. Include species occurrences flagged introduced? Defaults TRUE. extinct Logical. Include species occurrences flagged extinct? Defaults TRUE. location_doubtful Logical. Include species occurrences flagged location_doubtful? Defaults TRUE. hybrids Logical. Include hybrid species checklist? Defaults FALSE. infraspecies Logical. Include hybrid species checklist? Defaults TRUE. report_filename Character. Name HTML file. Defaults taxon_area_type.html report_dir Character. Directory HTML file saved . Must provided user. report_type Character; one \"alphabetical\" (default) \"taxonomic\". generated checklist sorted alphabetically, taxonomic status? wcvp_names data frame taxonomic names WCVP version 7 later. NULL (default), names loaded rWCVPdata::wcvp_names. wcvp_distributions data frame distributions WCVP version 7 later. NULL (default), distributions loaded rWCVPdata::wcvp_names.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_checklist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a species checklist from WCVP — wcvp_checklist","text":"Data frame filtered data , render_report=TRUE. report HTML file.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_checklist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a species checklist from WCVP — wcvp_checklist","text":"synonyms argument can used limit names Accepted. synonyms = TRUE invalid, illegitimate non-accepted names also included (.e., checklist limited names taxon_status == \"Synonym\"). Two styles checklist supported rWCVP - alphabetical taxonomic. alphabetical checklist, names arranged alphabetically accepted names bold, synonyms followed accepted name. taxonomic checklist, names grouped accepted names, synonyms listed beneath. types checklist include author, publication distribution information, though note family headings supported alphabetical checklists (due additional grouping requirement taxonomic format).","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_checklist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a species checklist from WCVP — wcvp_checklist","text":"","code":"#These examples take >10 seconds to run. if (FALSE) { wcvp_checklist(taxon=\"Myrtaceae\", taxon_rank=\"family\", area=get_wgsrpd3_codes(\"Brazil\")) wcvp_checklist(taxon=\"Ferns\", taxon_rank=\"higher\", area=get_wgsrpd3_codes(\"New Zealand\")) }"},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate spatial distribution objects for species, genera or families — wcvp_distribution","title":"Generate spatial distribution objects for species, genera or families — wcvp_distribution","text":"Generate spatial distribution objects species, genera families","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate spatial distribution objects for species, genera or families — wcvp_distribution","text":"","code":"wcvp_distribution(   taxon,   taxon_rank = c(\"species\", \"genus\", \"family\", \"order\", \"higher\"),   native = TRUE,   introduced = TRUE,   extinct = TRUE,   location_doubtful = TRUE,   wcvp_names = NULL,   wcvp_distributions = NULL )"},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate spatial distribution objects for species, genera or families — wcvp_distribution","text":"taxon Character. taxon mapped. Must provided. taxon_rank Character. One \"species\", \"genus\", \"family\", \"order\" \"higher\", giving rank value taxon. native Logical. Include native range? Defaults TRUE. introduced Logical. Include introduced range? Defaults TRUE. extinct Logical. Include extinct range? Defaults TRUE. location_doubtful Logical. Include occurrences thought doubtful? Defaults TRUE. wcvp_names data frame taxonomic names WCVP version 7 later. NULL (default), names loaded rWCVPdata::wcvp_names. wcvp_distributions data frame distributions WCVP version 7 later. NULL (default), distributions loaded rWCVPdata::wcvp_names.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate spatial distribution objects for species, genera or families — wcvp_distribution","text":"Simple features (sf) data frame containing range polygon/s taxon.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_distribution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate spatial distribution objects for species, genera or families — wcvp_distribution","text":"taxon_rank higher species, distribution whole group returned, individual species within group. also applies toggling options - example, introduced occurrences included outside native range, regardless whether native=TRUE native=FALSE. identify extinctions, introductions doubtful occurrences within native range, wcvp_summary wcvp_occ_mat functions can used.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate spatial distribution objects for species, genera or families — wcvp_distribution","text":"","code":"r <- wcvp_distribution(\"Callitris\", taxon_rank=\"genus\") p <- wcvp_distribution_map(r) p"},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_distribution_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot distribution maps for species, genera or families — wcvp_distribution_map","title":"Plot distribution maps for species, genera or families — wcvp_distribution_map","text":"Plot distribution maps species, genera families","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_distribution_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot distribution maps for species, genera or families — wcvp_distribution_map","text":"","code":"wcvp_distribution_map(   range,   crop_map = FALSE,   native = TRUE,   introduced = TRUE,   extinct = TRUE,   location_doubtful = TRUE )"},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_distribution_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot distribution maps for species, genera or families — wcvp_distribution_map","text":"range Simple features (sf) data frame type output wcvp_distribution(). crop_map Logical. Crop map extent distribution? Defaults FALSE. native Logical. Include native range? Defaults TRUE. introduced Logical. Include introduced range? Defaults TRUE. extinct Logical. Include extinct range? Defaults TRUE. location_doubtful Logical. Include occurrences thought doubtful? Defaults TRUE.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_distribution_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot distribution maps for species, genera or families — wcvp_distribution_map","text":"ggplot2::ggplot distribution.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_distribution_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot distribution maps for species, genera or families — wcvp_distribution_map","text":"colour scheme mirrors used Plants World (POWO; https://powo.science.kew.org/), green native, purple introduced, red extinct orange doubtful. See Examples use custom colours.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_distribution_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot distribution maps for species, genera or families — wcvp_distribution_map","text":"","code":"p <- wcvp_distribution_map(wcvp_distribution(\"Callitris\", taxon_rank=\"genus\")) p  # now only the native range, and cropped to range extent p <- wcvp_distribution_map(wcvp_distribution(\"Callitris\", taxon_rank=\"genus\"), introduced=FALSE, crop_map=TRUE) p  # now with different colours # note that this taxon only has native and introduced occurrences, so only two colours are needed p <- wcvp_distribution_map(wcvp_distribution(\"Callitris\", taxon_rank=\"genus\")) p + # for polygons   ggplot2::scale_fill_manual(values=c(\"red\", \"blue\")) + # for points (islands)   ggplot2::scale_colour_manual(values=c(\"red\", \"blue\")) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale."},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_match_exact.html","id":null,"dir":"Reference","previous_headings":"","what":"Exact matching to WCVP. — wcvp_match_exact","title":"Exact matching to WCVP. — wcvp_match_exact","text":"Exact matching names WCVP, optionally using author string refine results.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_match_exact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exact matching to WCVP. — wcvp_match_exact","text":"","code":"wcvp_match_exact(names_df, wcvp_names, name_col, author_col = NULL, id_col)"},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_match_exact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exact matching to WCVP. — wcvp_match_exact","text":"names_df Data frame names matching. wcvp_names Data frame taxonomic names WCVP version 7 later. NULL (default), names loaded rWCVPdata::wcvp_names. name_col Character. column names_df taxon name matching. author_col column names_df name authority, aid matching. Set NULL match author string. id_col column names_df observation id.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_match_exact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exact matching to WCVP. — wcvp_match_exact","text":"Match results WCVP bound original data names_df.","code":""},{"path":[]},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_match_exact.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exact matching to WCVP. — wcvp_match_exact","text":"","code":"if (FALSE) {  wcvp_names <- rWCVPdata::wcvp_names   # including author string  wcvp_match_exact(redlist_example, wcvp_names, \"scientificName\", author_col=\"authority\",  id_col = \"assessmentId\")   # without author string  wcvp_match_exact(redlist_example, wcvp_names, \"scientificName\", id_col = \"assessmentId\") }"},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_match_fuzzy.html","id":null,"dir":"Reference","previous_headings":"","what":"Fuzzy (approximate) matching to the WCVP. — wcvp_match_fuzzy","title":"Fuzzy (approximate) matching to the WCVP. — wcvp_match_fuzzy","text":"Fuzzy matching names WCVP using phonetic matching edit distance. WCVP can loaded matching rWCVPdata::wcvp_names.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_match_fuzzy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fuzzy (approximate) matching to the WCVP. — wcvp_match_fuzzy","text":"","code":"wcvp_match_fuzzy(names_df, wcvp_names, name_col, progress_bar = TRUE)  phonetic_match(names_df, wcvp_names, name_col)  edit_match(names_df, wcvp_names, name_col)"},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_match_fuzzy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fuzzy (approximate) matching to the WCVP. — wcvp_match_fuzzy","text":"names_df Data frame names matching. wcvp_names Data frame taxonomic names WCVP version 7 later. NULL (default), names loaded rWCVPdata::wcvp_names. name_col Character. column names_df taxon name matching. progress_bar Logical. Show progress bar matching? Defaults TRUE; changed FALSE used markdown report.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_match_fuzzy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fuzzy (approximate) matching to the WCVP. — wcvp_match_fuzzy","text":"Match results WCVP bound original data names_df.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_match_fuzzy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fuzzy (approximate) matching to the WCVP. — wcvp_match_fuzzy","text":"wcvp_match_fuzzy function uses phonetic matching first finds closest match based edit distance remaining names. Phonetic matching uses phonics::metaphone encoding maximum code length 20. Edit distance matching finds closest match based Levenshtein similarity, calculated RecordLinkage::levenshteinSim.","code":""},{"path":[]},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_match_fuzzy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fuzzy (approximate) matching to the WCVP. — wcvp_match_fuzzy","text":"","code":"if (FALSE) {  wcvp_names <- rWCVPdata::wcvp_names  wcvp_match_fuzzy(redlist_example, wcvp_names, \"scientificName\") }  if (FALSE) {  wcvp_names <- rWCVPdata::wcvp_names  phonetic_match(redlist_example, wcvp_names, \"scientificName\") }  if (FALSE) {  wcvp_names <- rWCVPdata::wcvp_names  edit_match(redlist_example, wcvp_names, \"scientificName\") }"},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_match_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Match names to the WCVP. — wcvp_match_names","title":"Match names to the WCVP. — wcvp_match_names","text":"Match names WCVP, first using exact matching using fuzzy matching remaining unmatched names.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_match_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match names to the WCVP. — wcvp_match_names","text":"","code":"wcvp_match_names(   names_df,   wcvp_names = NULL,   name_col = NULL,   id_col = NULL,   author_col = NULL,   join_cols = NULL,   fuzzy = TRUE,   progress_bar = TRUE )"},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_match_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match names to the WCVP. — wcvp_match_names","text":"names_df Data frame names matching. wcvp_names Data frame taxonomic names WCVP version 7 later. NULL (default), names loaded rWCVPdata::wcvp_names. name_col Character. column names_df taxon name matching. id_col Character. column names_df unique ID name. created row number provided. author_col column names_df name authority, aid matching. Set NULL match author string. join_cols Character. vector name parts make taxon name, name_col provided. fuzzy Logical; whether fuzzy matching used names matched exactly. progress_bar Logical. Show progress bar matching? Defaults TRUE; changed FALSE used markdown report.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_match_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match names to the WCVP. — wcvp_match_names","text":"Match results WCVP bound original data names_df.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_match_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match names to the WCVP. — wcvp_match_names","text":"default, exact matching uses taxon name (supplied name_col) unless column specifying author string provided (author_col). Columns setting name parts can supplied join_cols place taxon name, must supplied order want joined (e.g. c(\"genus\", \"species\", \"infra_rank\", \"infra\")). Fuzzy matching uses combination phonetic edit distance matching, can optionally turned using fuzzy=FALSE. WCVP can loaded matching rWCVPdata::wcvp_names. See example workflow.","code":""},{"path":[]},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_match_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match names to the WCVP. — wcvp_match_names","text":"","code":"if (FALSE) {  wcvp_names <- rWCVPdata::wcvp_names   # without author  wcvp_match_names(redlist_example, wcvp_names, name_col=\"scientificName\",             id_col=\"assessmentId\")   # with author  wcvp_match_names(redlist_example, wcvp_names, name_col=\"scientificName\",             id_col=\"assessmentId\", author_col=\"authority\") }"},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_occ_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate occurrence matrix for taxa and areas — wcvp_occ_mat","title":"Generate occurrence matrix for taxa and areas — wcvp_occ_mat","text":"Generate occurrence matrix taxa areas","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_occ_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate occurrence matrix for taxa and areas — wcvp_occ_mat","text":"","code":"wcvp_occ_mat(   taxon = NULL,   taxon_rank = c(\"species\", \"genus\", \"family\", \"order\", \"higher\"),   area_codes = NULL,   native = TRUE,   introduced = TRUE,   extinct = TRUE,   location_doubtful = TRUE,   wcvp_names = NULL,   wcvp_distributions = NULL )"},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_occ_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate occurrence matrix for taxa and areas — wcvp_occ_mat","text":"taxon Character. One many taxa included. Defaults NULL (species) taxon_rank Character. One \"species\", \"genus\", \"family\", \"order\" \"higher\", giving rank value/s taxon. Must specified unless taxon NULL. area_codes Character. One many WGSPRD level 3 region codes. Defaults NULL (global). native Logical. Include species occurrences flagged introduced, extinct doubtful? Defaults TRUE. introduced Logical. Include species occurrences flagged introduced? Defaults TRUE. extinct Logical. Include species occurrences flagged extinct? Defaults TRUE. location_doubtful Logical. Include species occurrences flagged location doubtful? Defaults TRUE. wcvp_names data frame taxonomic names WCVP version 7 later. NULL, names loaded rWCVPdata::wcvp_names. wcvp_distributions data frame distributions WCVP version 7 later. NULL, distributions loaded rWCVPdata::wcvp_names.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_occ_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate occurrence matrix for taxa and areas — wcvp_occ_mat","text":"data.frame containing taxon_name plant_name_id species present area, plus one variable WGSPRD level 3 region area, species presences marked 1 absences marked 0.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_occ_mat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate occurrence matrix for taxa and areas — wcvp_occ_mat","text":"See example output can formatted publication.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_occ_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate occurrence matrix for taxa and areas — wcvp_occ_mat","text":"","code":"wcvp_occ_mat(taxon=\"Poa\", taxon_rank=\"genus\", area=c(\"TAS\", \"VIC\",\"NSW\"), introduced=FALSE) #> # A tibble: 37 × 5 #>    plant_name_id taxon_name          NSW   TAS   VIC #>            <dbl> <chr>             <dbl> <dbl> <dbl> #>  1        435044 Poa affinis           1     0     1 #>  2        469193 Poa amplexicaulis     0     0     1 #>  3        435565 Poa cheelii           1     0     0 #>  4        435598 Poa clelandii         0     1     1 #>  5        435599 Poa clivicola         1     1     1 #>  6        435658 Poa costiniana        1     1     1 #>  7        435661 Poa crassicaudex      0     0     1 #>  8        435797 Poa drummondiana      0     0     1 #>  9        435841 Poa ensiformis        1     0     1 #> 10        435878 Poa fawcettiae        1     1     1 #> # … with 27 more rows"},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_reformat.html","id":null,"dir":"Reference","previous_headings":"","what":"Reformat local versions of WCVP — wcvp_reformat","title":"Reformat local versions of WCVP — wcvp_reformat","text":"Reformat local versions WCVP","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_reformat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reformat local versions of WCVP — wcvp_reformat","text":"","code":"wcvp_reformat(wcvp_local, version = NULL)"},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_reformat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reformat local versions of WCVP — wcvp_reformat","text":"wcvp_local Data.frame. Local copy WCVP. version Either 9 \"v9\". add support versions needed.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_reformat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reformat local versions of WCVP — wcvp_reformat","text":"data.frame variable structure WCVP included data package rWCVPdata.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_reformat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reformat local versions of WCVP — wcvp_reformat","text":"Note original variables preserved reformatting. example, publication single variable v9, split multiple data package. therefore possible simply rename variable. Variables present data package v9 filled NA.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a summary table from the WCVP — wcvp_summary","title":"Generate a summary table from the WCVP — wcvp_summary","text":"Generate summary table WCVP","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a summary table from the WCVP — wcvp_summary","text":"","code":"wcvp_summary(   taxon = NULL,   taxon_rank = c(\"species\", \"genus\", \"family\", \"order\", \"higher\"),   area_codes = NULL,   grouping_var = c(\"area_code_l3\", \"genus\", \"family\", \"order\", \"higher\"),   hybrids = FALSE,   wcvp_names = NULL,   wcvp_distributions = NULL )"},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a summary table from the WCVP — wcvp_summary","text":"taxon Character. Taxon included. Defaults NULL (taxonomic filter; taxa). taxon_rank Character. One \"genus\", \"family\", \"order\" \"higher\", giving rank value/s taxon. Must specified unless taxon NULL. area_codes Character. One many WGSPRD level 3 region codes. Defaults NULL (global). grouping_var Character; one \"area_code_l3\", \"genus\", \"family\",\"order\" \"higher\" specifying summary arranged. Defaults area_code_l3. hybrids Logical. Include hybrid species counts? Defaults FALSE. wcvp_names data frame taxonomic names WCVP version 7 later. NULL, names loaded rWCVPdata::wcvp_names. wcvp_distributions data frame distributions WCVP version 7 later. NULL, distributions loaded rWCVPdata::wcvp_names.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a summary table from the WCVP — wcvp_summary","text":"Data.frame filtered data, gt table","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a summary table from the WCVP — wcvp_summary","text":"Valid values rank 'higher' 'Angiosperms', 'Gymnosperms', 'Ferns' 'Lycophytes'. Note grouping variable (taxonomic) lower level taxon taxon_rank produce meaningful summary (.e., make sense group genus genus, family higher classification). Additionally, grouping variable taxonomic species occurrences aggregated across input area. means species native input area (even introduced extinct parts) counted 'Native'. Similarly, introduced occurrences take precedence extinct occurrences. Note type summary table, 'Endemic' means endemic input area, necessarily single WGSRPD Level 3 Area within input area.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a summary table from the WCVP — wcvp_summary","text":"","code":"ferns <- wcvp_summary(\"Ferns\", \"higher\", get_wgsrpd3_codes(\"New Zealand\"), grouping_var=\"family\") #> ℹ Matches to input geography found at Country (Gallagher) and Region (Level 2) #> ℹ Aggregating occurrence types across input area (\"New Zealand\") - see `?wcvp_summary()` for details. wcvp_summary_gt(ferns) #> <div id=\"yfylvbcxkp\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>html { #>   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; #> } #>  #> #yfylvbcxkp .gt_table { #>   display: table; #>   border-collapse: collapse; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 12px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #yfylvbcxkp .gt_heading { #>   background-color: #FFFFFF; #>   text-align: left; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #yfylvbcxkp .gt_caption { #>   padding-top: 4px; #>   padding-bottom: 4px; #> } #>  #> #yfylvbcxkp .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #yfylvbcxkp .gt_subtitle { #>   color: #333333; #>   font-size: 12px; #>   font-weight: initial; #>   padding-top: 0; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #yfylvbcxkp .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #yfylvbcxkp .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #yfylvbcxkp .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: bold; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #yfylvbcxkp .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: bold; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #yfylvbcxkp .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #yfylvbcxkp .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #yfylvbcxkp .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #yfylvbcxkp .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   text-align: left; #> } #>  #> #yfylvbcxkp .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #yfylvbcxkp .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #yfylvbcxkp .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #yfylvbcxkp .gt_row { #>   padding-top: 1px; #>   padding-bottom: 1px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: rgba(255, 255, 255, 0); #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #yfylvbcxkp .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #yfylvbcxkp .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: bold; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #yfylvbcxkp .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #yfylvbcxkp .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #yfylvbcxkp .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #yfylvbcxkp .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #yfylvbcxkp .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #yfylvbcxkp .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #yfylvbcxkp .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #yfylvbcxkp .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #yfylvbcxkp .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #yfylvbcxkp .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #yfylvbcxkp .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-left: 4px; #>   padding-right: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #yfylvbcxkp .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #yfylvbcxkp .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #yfylvbcxkp .gt_left { #>   text-align: left; #> } #>  #> #yfylvbcxkp .gt_center { #>   text-align: center; #> } #>  #> #yfylvbcxkp .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #yfylvbcxkp .gt_font_normal { #>   font-weight: normal; #> } #>  #> #yfylvbcxkp .gt_font_bold { #>   font-weight: bold; #> } #>  #> #yfylvbcxkp .gt_font_italic { #>   font-style: italic; #> } #>  #> #yfylvbcxkp .gt_super { #>   font-size: 65%; #> } #>  #> #yfylvbcxkp .gt_footnote_marks { #>   font-style: italic; #>   font-weight: normal; #>   font-size: 75%; #>   vertical-align: 0.4em; #> } #>  #> #yfylvbcxkp .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #yfylvbcxkp .gt_indent_1 { #>   text-indent: 5px; #> } #>  #> #yfylvbcxkp .gt_indent_2 { #>   text-indent: 10px; #> } #>  #> #yfylvbcxkp .gt_indent_3 { #>   text-indent: 15px; #> } #>  #> #yfylvbcxkp .gt_indent_4 { #>   text-indent: 20px; #> } #>  #> #yfylvbcxkp .gt_indent_5 { #>   text-indent: 25px; #> } #> <\/style> #>   <table class=\"gt_table\"> #>   <thead class=\"gt_header\"> #>     <tr> #>       <td colspan=\"6\" class=\"gt_heading gt_title gt_font_normal\" style><b> Ferns of New Zealand <\/b><\/td> #>     <\/tr> #>     <tr> #>       <td colspan=\"6\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>Total number of species: 210<br>Number of regionally endemic species: 78<\/td> #>     <\/tr> #>   <\/thead> #>   <thead class=\"gt_col_headings\"> #>     <tr> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Family\">Family<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Native\">Native<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Endemic\">Endemic<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Introduced\">Introduced<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Extinct\">Extinct<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Total\">Total<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Aspleniaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">60<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">22<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">60<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Cyatheaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">11<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">8<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">12<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Dennstaedtiaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">12<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">2<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">12<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Gleicheniaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">9<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">9<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Hymenophyllaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">28<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">16<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">28<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Lindsaeaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">3<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">3<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Marattiaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">1<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Marsileaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">1<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Ophioglossaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">6<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">6<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Osmundaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">3<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">2<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">4<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Polypodiaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">35<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">17<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\">7<\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">42<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Psilotaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">6<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">6<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Pteridaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">18<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">6<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">19<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Salviniaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">2<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Schizaeaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">5<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">5<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div>"},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_summary_gt.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a summary table from wcvp_summary — wcvp_summary_gt","title":"Render a summary table from wcvp_summary — wcvp_summary_gt","text":"Render summary table wcvp_summary","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_summary_gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a summary table from wcvp_summary — wcvp_summary_gt","text":"","code":"wcvp_summary_gt(x)"},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_summary_gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a summary table from wcvp_summary — wcvp_summary_gt","text":"x List.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_summary_gt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a summary table from wcvp_summary — wcvp_summary_gt","text":"gt table","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wcvp_summary_gt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render a summary table from wcvp_summary — wcvp_summary_gt","text":"","code":"ferns <- wcvp_summary(\"Ferns\", \"higher\", get_wgsrpd3_codes(\"New Zealand\"), grouping_var=\"family\") #> ℹ Matches to input geography found at Country (Gallagher) and Region (Level 2) #> ℹ Aggregating occurrence types across input area (\"New Zealand\") - see `?wcvp_summary()` for details. wcvp_summary_gt(ferns) #> <div id=\"svrbfhgzbw\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>html { #>   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; #> } #>  #> #svrbfhgzbw .gt_table { #>   display: table; #>   border-collapse: collapse; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 12px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #svrbfhgzbw .gt_heading { #>   background-color: #FFFFFF; #>   text-align: left; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #svrbfhgzbw .gt_caption { #>   padding-top: 4px; #>   padding-bottom: 4px; #> } #>  #> #svrbfhgzbw .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #svrbfhgzbw .gt_subtitle { #>   color: #333333; #>   font-size: 12px; #>   font-weight: initial; #>   padding-top: 0; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #svrbfhgzbw .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #svrbfhgzbw .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #svrbfhgzbw .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: bold; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #svrbfhgzbw .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: bold; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #svrbfhgzbw .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #svrbfhgzbw .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #svrbfhgzbw .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #svrbfhgzbw .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   text-align: left; #> } #>  #> #svrbfhgzbw .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #svrbfhgzbw .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #svrbfhgzbw .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #svrbfhgzbw .gt_row { #>   padding-top: 1px; #>   padding-bottom: 1px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: rgba(255, 255, 255, 0); #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #svrbfhgzbw .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #svrbfhgzbw .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: bold; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #svrbfhgzbw .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #svrbfhgzbw .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #svrbfhgzbw .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #svrbfhgzbw .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #svrbfhgzbw .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #svrbfhgzbw .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #svrbfhgzbw .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #svrbfhgzbw .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #svrbfhgzbw .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #svrbfhgzbw .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #svrbfhgzbw .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-left: 4px; #>   padding-right: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #svrbfhgzbw .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #svrbfhgzbw .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #svrbfhgzbw .gt_left { #>   text-align: left; #> } #>  #> #svrbfhgzbw .gt_center { #>   text-align: center; #> } #>  #> #svrbfhgzbw .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #svrbfhgzbw .gt_font_normal { #>   font-weight: normal; #> } #>  #> #svrbfhgzbw .gt_font_bold { #>   font-weight: bold; #> } #>  #> #svrbfhgzbw .gt_font_italic { #>   font-style: italic; #> } #>  #> #svrbfhgzbw .gt_super { #>   font-size: 65%; #> } #>  #> #svrbfhgzbw .gt_footnote_marks { #>   font-style: italic; #>   font-weight: normal; #>   font-size: 75%; #>   vertical-align: 0.4em; #> } #>  #> #svrbfhgzbw .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #svrbfhgzbw .gt_indent_1 { #>   text-indent: 5px; #> } #>  #> #svrbfhgzbw .gt_indent_2 { #>   text-indent: 10px; #> } #>  #> #svrbfhgzbw .gt_indent_3 { #>   text-indent: 15px; #> } #>  #> #svrbfhgzbw .gt_indent_4 { #>   text-indent: 20px; #> } #>  #> #svrbfhgzbw .gt_indent_5 { #>   text-indent: 25px; #> } #> <\/style> #>   <table class=\"gt_table\"> #>   <thead class=\"gt_header\"> #>     <tr> #>       <td colspan=\"6\" class=\"gt_heading gt_title gt_font_normal\" style><b> Ferns of New Zealand <\/b><\/td> #>     <\/tr> #>     <tr> #>       <td colspan=\"6\" class=\"gt_heading gt_subtitle gt_font_normal gt_bottom_border\" style>Total number of species: 210<br>Number of regionally endemic species: 78<\/td> #>     <\/tr> #>   <\/thead> #>   <thead class=\"gt_col_headings\"> #>     <tr> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Family\">Family<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Native\">Native<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Endemic\">Endemic<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Introduced\">Introduced<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Extinct\">Extinct<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Total\">Total<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Aspleniaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">60<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">22<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">60<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Cyatheaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">11<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">8<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">12<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Dennstaedtiaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">12<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">2<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">12<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Gleicheniaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">9<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">9<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Hymenophyllaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">28<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">16<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">28<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Lindsaeaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">3<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">3<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Marattiaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">1<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Marsileaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">1<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Ophioglossaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">6<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">6<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Osmundaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">3<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">2<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">4<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Polypodiaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">35<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">17<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\">7<\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">42<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Psilotaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">6<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">6<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Pteridaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">18<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">6<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">19<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Salviniaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">2<\/td><\/tr> #>     <tr><td headers=\"Family\" class=\"gt_row gt_left\">Schizaeaceae<\/td> #> <td headers=\"Native\" class=\"gt_row gt_right\">5<\/td> #> <td headers=\"Endemic\" class=\"gt_row gt_right\">1<\/td> #> <td headers=\"Introduced\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Extinct\" class=\"gt_row gt_right\"><\/td> #> <td headers=\"Total\" class=\"gt_row gt_right\" style=\"font-weight: bold;\">5<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div>"},{"path":"https://matildabrown.github.io/rWCVP/reference/wgsrpd3.html","id":null,"dir":"Reference","previous_headings":"","what":"Biodiversity Information Standards (TDWG) World Geographical Scheme for\nRecording Plant Distributions (WGSRPD) — wgsrpd3","title":"Biodiversity Information Standards (TDWG) World Geographical Scheme for\nRecording Plant Distributions (WGSRPD) — wgsrpd3","text":"Spatial data WGSRPD Level 3, plotting maps","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wgsrpd3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Biodiversity Information Standards (TDWG) World Geographical Scheme for\nRecording Plant Distributions (WGSRPD) — wgsrpd3","text":"","code":"wgsrpd3"},{"path":"https://matildabrown.github.io/rWCVP/reference/wgsrpd3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Biodiversity Information Standards (TDWG) World Geographical Scheme for\nRecording Plant Distributions (WGSRPD) — wgsrpd3","text":"'sf' object 20 rows 4 variables: LEVEL3_NAM Region name LEVEL3_COD Region code LEVEL2_COD Level 2 code LEVEL1_COD Level 1 code (continent) geometry sf geometry fillcol Used mapping.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wgsrpd3.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Biodiversity Information Standards (TDWG) World Geographical Scheme for\nRecording Plant Distributions (WGSRPD) — wgsrpd3","text":"https://github.com/tdwg/wgsrpd/tree/master/level3","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wgsrpd_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Data for mapping WGSRPD geography to other levels — wgsrpd_mapping","title":"Data for mapping WGSRPD geography to other levels — wgsrpd_mapping","text":"dataset containing area (Level 3), #' region (Level 2), continent (Level 1), country (political) hemisphere category Level 3 area. Country mapping follows Gallagher et al. (2020).","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wgsrpd_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data for mapping WGSRPD geography to other levels — wgsrpd_mapping","text":"","code":"wgsrpd_mapping"},{"path":"https://matildabrown.github.io/rWCVP/reference/wgsrpd_mapping.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data for mapping WGSRPD geography to other levels — wgsrpd_mapping","text":"data frame 370 rows 7 variables: HEMISPHERE Northern, Southern Equatorial (spanning equator). LEVEL1_COD Continent code. LEVEL1_NAM Continent. LEVEL2_COD Region code. LEVEL2_NAM Region. COUNTRY Country (political; Gallagher et al., 2020) LEVEL3_COD Area code. LEVEL3_NAM Area.","code":""},{"path":"https://matildabrown.github.io/rWCVP/reference/wgsrpd_mapping.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data for mapping WGSRPD geography to other levels — wgsrpd_mapping","text":"Modified data available https://github.com/tdwg/wgsrpd","code":""}]
